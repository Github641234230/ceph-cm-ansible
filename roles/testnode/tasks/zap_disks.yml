---
# These zap tasks are run on freshly reimaged cobbler_managed machines
# even when using the -stock profiles.  Therefore, testnode package
# installation hasn't happened yet so we install zap dependencies here.

- name: Make sure apt dependencies are installed
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - gdisk
    - dmsetup
  when: ansible_os_family == "Debian"

- name: Make sure rpm dependencies are installed
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - gdisk
    # for dmsetup
    - device-mapper
  when: ansible_os_family == "RedHat"

- name: Set root disk
  set_fact:
    root_disk: "{{ item.device|regex_replace('[0-9]+', '') }}"
  with_items: "{{ ansible_mounts }}"
  when: item.mount == '/'

- name: Compile list of non-root partitions
  shell: "lsblk --list --noheadings | grep part | grep -v {{ root_disk|regex_replace('/dev/', '') }} | awk '{ print $1 }'"
  register: non_root_partitions

- name: Unmount any non-root mountpoints
  mount:
    path: "{{ item.mount }}"
    state: unmounted
  with_items: "{{ ansible_mounts }}"
  when: item.mount != '/'

## http://tracker.ceph.com/issues/20533
## Trusty version of wipefs lacks --force option
- name: Wipe filesystems on non-root partitions
  shell: "wipefs --force --all /dev/{{ item }} || wipefs --all /dev/{{ item }}"
  with_items: "{{ non_root_partitions.stdout_lines }}"
  when: non_root_partitions|length > 0

## See https://github.com/ceph/ceph-ansible/issues/759#issue-153248281
- name: Zap all non-root disks
  shell: "sgdisk --zap-all /dev/{{ item.key }} || sgdisk --zap-all /dev/{{ item.key }}"
  with_dict: "{{ ansible_devices }}"
  when:
    - item.key not in root_disk
    - '"loop" not in item.key'
    - '"ram" not in item.key'

- name: Remove all LVM data
  shell: "dmsetup remove_all --force"
  register: removed_lvm_data
  until: "'Unable to remove' not in removed_lvm_data.stderr"
  retries: 5
  delay: 1
  ignore_errors: true

## See http://tracker.ceph.com/issues/21989
## Following 6 tasks only get run if `dmsetup remove_all` fails
- name: Check for logical volumes
  shell: "lvdisplay | grep 'LV Path' | awk '{ print $3 }'"
  register: lvs_to_remove
  when: removed_lvm_data|failed

- name: Check for volume groups
  shell: "vgdisplay | grep 'VG Name' | awk '{ print $3 }'"
  register: vgs_to_remove
  when: removed_lvm_data|failed

- name: Check for physical volumes
  shell: "pvdisplay | grep 'PV Name' | awk '{ print $3 }'"
  register: pvs_to_remove
  when: removed_lvm_data|failed

# The lvol ansible module is not used here because the vg name is required and that'd get messy
- name: Remove logical volumes
  shell: "lvremove --force {{ item }}"
  with_items: "{{ lvs_to_remove.stdout_lines }}"
  when:
    - removed_lvm_data|failed
    - lvs_to_remove is defined
    - lvs_to_remove.stdout_lines|length > 0

- name: Remove volume groups
  lvg:
    vg: "{{ item }}"
    state: absent
    force: yes
  with_items: "{{ vgs_to_remove.stdout_lines }}"
  when:
    - removed_lvm_data|failed
    - vgs_to_remove is defined
    - vgs_to_remove.stdout_lines|length > 0

- name: Remove physical volumes
  shell: "pvremove --force {{ item }}"
  with_items: "{{ pvs_to_remove.stdout_lines }}"
  when:
    - removed_lvm_data|failed
    - pvs_to_remove is defined
    - pvs_to_remove.stdout_lines|length > 0

- name: Notify OS of partition changes
  command: partprobe
